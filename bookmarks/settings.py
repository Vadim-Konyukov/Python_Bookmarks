"""
Django settings for bookmarks project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k5u4vw=et7z$49xi7c7u7#ygj3kgu095!v2clpkb&=70m)x%az'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
THUMBNAIL_DEBUG = True

# if DEBUG:
#     import mimetypes
#     mimetypes.add_type('application/javascript', '.js', True)
#     mimetypes.add_type('text/css', '.css', True)


ALLOWED_HOSTS = ['mysite.com', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'account.apps.AccountConfig',   # обеспечиваем что по умолчанию будут использоваться конкретно-прикладные шаблоны аутентификации
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'social_django',
    'django_extensions',
    'images.apps.ImagesConfig',
    'easy_thumbnails',
    'actions.apps.ActionsConfig',
    'debug_toolbar',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # включаем debug toolbar
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookmarks.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookmarks.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# URL-адреса перенаправлений
LOGIN_REDIRECT_URL = 'dashboard'  # перенаправляет пользователя после успешного входа (если нет параметра next)
LOGIN_URL = 'login' # адрес, на который следует перенаправлять пользователя, чтобы зарегистрировать его вход (например, где есть декоратор login_required)
LOGOUT_URL = 'logout'   # перенаправлять пользователя, чтобы зарегистрировать его выход


# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_HOST ='smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_email@example.com'
# EMAIL_HOST_PASSWORD = 'your_password'


# Media settings
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR /'media'


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # обеспечивает авторизацию с использованием логина и пароля
    # 'account.backends.EmailAuthBackend',  # обеспечивает авторизацию с использованием электронной почты
    'social_core.backends.google.GoogleOAuth2',  # обеспечивает авторизацию с использованием Google OAuth2
    'social_core.backends.facebook.FacebookOAuth2',  # обеспечивает авторизацию с использованием Facebook OAuth2
    'social_core.backends.github.GithubOAuth2',  # обеспечивает авторизацию с использованием GitHub OAuth2
    'social_core.backends.twitter.TwitterOAuth',  # обеспечивает авторизацию с использованием Twitter OAuth2

]


SOCIAL_AUTH_FACEBOOK_KEY = 'your_facebook_app_id'   # ИД приложения Facebook
SOCIAL_AUTH_FACEBOOK_SECRET = 'your_facebook_app_secret'    #  Секрет приложения Facebook

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'your_google_app_id'   # ИД клиента Google OAuth2
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'your_google_app_secret'    # Секрет клиента Google OAuth2


# Автоматически создавать объект Profile в БД при формировании нового пользователя
SOCIAL_AUTH_PIPELINE = [
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'account.authentication.create_profile',    # Создание профиля
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
]


ABSOLUTE_URL_OVERRIDES = {
    'auth.user': lambda u: reverse_lazy('user_detail',
                                        args=[u.username])  # переопределяем URL для детального просмотра пользователя
}

INTERNAL_IPS = [
    '127.0.0.1',
]

# ------------------------   Настроечные параметры Redis  ----------------------------------------

REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0


